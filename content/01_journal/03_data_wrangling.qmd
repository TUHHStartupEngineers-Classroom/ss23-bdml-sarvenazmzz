---
title: "Data Wrangling"
author: "Joschka Schwarz"
---

```{r}
# Load the necessary libraries
library(h2o)
library(magrittr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tibble)
library(stringr)
library(forcats)

# Initialize H2O
h2o.init()

# Load the training, validation, and test datasets
train_df <- h2o.importFile(path = "C:/Users/mosta/Desktop/Business Decisions with Machine Learning/3/product_backorders.csv")
valid_df <- h2o.importFile(path = "C:/Users/mosta/Desktop/Business Decisions with Machine Learning/3/product_backorders.csv")
test_df <- h2o.importFile(path = "C:/Users/mosta/Desktop/Business Decisions with Machine Learning/3/product_backorders.csv")

# Specify the response and predictor variables
response <- "went_on_backorder"
predictors <- setdiff(names(train_df), response)

# Run AutoML specifying the stopping criterion
automl_models_h2o <- h2o.automl(
  x = predictors,
  y = response,
  training_frame = train_df,
  validation_frame = valid_df,
  max_runtime_secs = 60
)

# View the leaderboard
leaderboard <- automl_models_h2o@leaderboard
print(leaderboard)

# Extract the model from the leaderboard
model <- automl_models_h2o@leaderboard[6, "model_id"] %>%
  h2o.getModel()

# Extract the leader model
leader_model <- automl_models_h2o@leader

# Predict using the leader model
predictions <- h2o.predict(leader_model, newdata = test_df)
predictions_tbl <- predictions %>% as_tibble()
predictions_tbl

# Set the directory path to save the leader model
save_directory <- "C:/Users/mosta/Desktop/Business Decisions with Machine Learning/3/leadermodel"

# Save the leader model
h2o.saveModel(leader_model, path = save_directory, force = TRUE)
h2o.saveModel(model, path = save_directory, force = TRUE)

# Visualize the leaderboard
plot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c("auc", "logloss"),
                                 n_max = 20, size = 4, include_lbl = TRUE) {
  # Setup inputs
  order_by <- tolower(order_by[[1]])
  
  leaderboard_tbl <- h2o_leaderboard %>%
    as_tibble() %>%
    select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% 
    mutate(model_type = str_extract(model_id, "[^_]+")) %>%
    rownames_to_column(var = "rowname") %>%
    mutate(model_id = paste0(rowname, ". ", model_id) %>% as.factor())
  
  # Transformation
  if (order_by == "auc") {
    data_transformed_tbl <- leaderboard_tbl %>%
      slice(1:n_max) %>%
      mutate(
        model_id = as_factor(model_id) %>% reorder(auc),
        model_type = as.factor(model_type)
      ) %>%
      pivot_longer(cols = -c(model_id, model_type, rowname), 
                   names_to = "key", 
                   values_to = "value", 
                   names_transform = list(key = forcats::fct_inorder)
      )
  } else if (order_by == "logloss") {
    data_transformed_tbl <- leaderboard_tbl %>%
      slice(1:n_max) %>%
      mutate(
        model_id = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),
        model_type = as.factor(model_type)
      ) %>%
      pivot_longer(cols = -c(model_id, model_type, rowname), 
                   names_to = "key", 
                   values_to = "value", 
                   names_transform = list(key = forcats::fct_inorder)
      )
  } else {
    # If nothing is supplied
    stop(paste0("order_by = '", order_by, "' is not a permitted option."))
  }
  
  # Visualization
  g <- data_transformed_tbl %>%
    ggplot(aes(value, model_id, color = model_type)) +
    geom_point(size = size) +
    facet_wrap(~ key, scales = "free_x") +
    labs(title = "Leaderboard Metrics",
         subtitle = paste0("Ordered by: ", toupper(order_by)),
         y = "Model Position, Model ID", x = "")
  
  if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), hjust = "inward"))
  
  return(g)
}

plot_h2o_leaderboard(automl_models_h2o@leaderboard, order_by = "auc", n_max = 15)

# Tune the model using grid search
hyper_params <- list(
  ntrees = c(100, 200, 300),
  max_depth = c(5, 10, 15)
)

grid <- h2o.grid(
  algorithm = "gbm",
  grid_id = "gbm_grid",
  x = predictors,
  y = response,
  training_frame = train_df,
  validation_frame = valid_df,
  hyper_params = hyper_params
)

# Get the best model from the grid search
best_model <- grid@model_ids[[1]]
best_model <- h2o.getModel(best_model)

# Predict using the best model
predictions_best <- h2o.predict(best_model, newdata = test_df)
predictions_best_tbl <- predictions_best %>% as_tibble()
predictions_best_tbl


```